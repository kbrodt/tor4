[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"


[tool.poetry]
name = "tor4"
version = "0.1.0"
description = "A toy pytorch-like library based on NumPy"
authors = ["Kirill Brodt <cyrill.brodt@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/kbrodt/tor4"
keywords = ["PyTorch on NumPy", "Automatic differentiation", "Autodiff", "Neural Networks"]

[tool.poetry.dependencies]
python = "^3.6.1"
pip = "^20.0.2"
numpy = "^1.16.0"
requests = "^2.23.0"
scipy = "^1.4.1"
tqdm = "^4.43.0"

# [tool.poetry.dev-dependencies]
black = {version = "^19.10b0", allow-prereleases = true, optional = true}
coverage = {version = "^5.2.1", optional = true}
flake8 = {version = "^3.8.3", optional = true}
flake8-bugbear = {version = "^19.8.0", optional = true}
isort = {version = "^4.3.21", optional = true}
lxml = {version = "^4.5.2", optional = true}
mypy = {version = "^0.782.0", optional = true}
pytest = {version = "^5.0", optional = true}

[tool.poetry.extras]
dev = [
    "black",
    "coverage",
    "flake8",
    "flake8-bugbear",
    "isort",
    "lxml",
    "mypy",
    "pytest",
]


[tool.black]
line-length = 88
target-version = ['py36', 'py37', 'py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''


[tool.isort]
profile = "hug"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88


[tool.pylint.'MESSAGES CONTROL']
disable = ["C0330", "C0326"]

[tool.pylint.format]
max-line-length = 88


[tool.coverage.run]
branch = true
source = ["."]
omit = ["*/.tox/*", "*/__main__.py", "*/venv*/*", "*/setup.py"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 80
exclude_lines = [
    # a more strict default pragma
    "\\# pragma: no cover\\b",

    # allow defensive code
    "^\\s*raise AssertionError\\b",
    "^\\s*raise NotImplementedError\\b",
    "^\\s*return NotImplemented\\b",
    "^\\s*raise$",

    # typing-related code
    "^if (False|TYPE_CHECKING):",
    ": \\.\\.\\.$",
    "^ +\\.\\.\\.$",
    "-> ['\"]?NoReturn['\"]?:",

    # non-runnable code
    "if __name__ == ['\"]__main__['\"]:$",
]
